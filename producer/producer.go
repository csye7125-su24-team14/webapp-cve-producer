package producer

import (
	"fmt"
	"log"

	"github.com/Shopify/sarama"
)

// var producer sarama.SyncProducer

func Main() {
	brokersUrl := []string{
		"mykafka-controller-0.mykafka-controller-headless.default.svc.cluster.local:9092",
		"mykafka-controller-1.mykafka-controller-headless.default.svc.cluster.local:9092",
		"mykafka-controller-2.mykafka-controller-headless.default.svc.cluster.local:9092",
	}
	// producer, err := ConnectProducer(brokersUrl)
	producer, err := ConnectProducer(brokersUrl)
	if err != nil {
		log.Fatalf("%v", err)
	}
	defer producer.Close()
	SaveCve(producer)
}

func ConnectProducer(brokersUrl []string) (sarama.SyncProducer, error) {

	config := sarama.NewConfig()
	config.Version = sarama.V2_6_0_0
	config.Producer.Return.Successes = true
	config.Producer.RequiredAcks = sarama.WaitForAll
	config.Producer.Retry.Max = 5
	// SASL configuration
	config.Net.SASL.Enable = true
	config.Net.SASL.Mechanism = sarama.SASLTypeSCRAMSHA256
	config.Net.SASL.User = "user1"
	config.Net.SASL.Password = "cBW2BLBF4x"

	config.ClientID = "sasl_scram_client"
	config.Metadata.Full = true

	config.Net.SASL.Handshake = true

	config.Net.SASL.SCRAMClientGeneratorFunc = func() sarama.SCRAMClient { return &XDGSCRAMClient{HashGeneratorFcn: SHA256} }

	// nf.Net.SASL.SCRAMClientGeneratorFunc =
	// conf.Net.SASL.Mechanism = sarama.SASLTypeSCRAMSHA256

	// if *useTLS {
	// 	conf.Net.TLS.Enable = true
	// 	conf.Net.TLS.Config = createTLSConfiguration()

	conn, err := sarama.NewSyncProducer(brokersUrl, config)
	if err != nil {
		return nil, err
	}

	return conn, nil
}

func PushCveToQueue(topic string, key string, cve []byte, producer sarama.SyncProducer) error {

	msg := &sarama.ProducerMessage{
		Topic: topic,
		Key:   sarama.StringEncoder(key),
		Value: sarama.StringEncoder(cve),
	}

	partition, offset, err := producer.SendMessage(msg)
	if err != nil {
		return err
	}

	fmt.Printf("Message is stored in topic(%s)/partition(%d)/offset(%d)\n", topic, partition, offset)

	return nil
}
